#!/bin/sh

ERRORS=0

clone_laravel () {
    if [ ! -d src/public ]; then
        cd src
        git clone https://github.com/laravel/laravel.git . &> /dev/null
        if [ $? != 0 ]; then
            cd ..
            clone_laravel
        else
            echo 'Renaming .env.example to .env'
            mv .env.example .env
            echo 'Modifying .env file'
            sed -i -e "s/APP_URL=.*/APP_URL=http:\/\/nginx/g
                       s/DB_HOST=.*/DB_HOST=mysql/g
                       s/DB_DATABASE=.*/DB_DATABASE=$db_database/g
                       s/DB_PASSWORD=.*/DB_PASSWORD=$db_pass/g" .env
            echo 'Changing storage folder permissions'
            echo 'Done'
        fi
    fi
}

[ ! -d mysql ] && mkdir mysql;
[ ! -d src ] && mkdir src;


if [ ! -e .env ]; then
    echo 'Creating new .env file'
    read -p "New password for database: " db_pass
    read -p "New database name: " db_database
    printf "DB_DATABASE=${db_database}\nDB_PASSWORD=${db_pass}\n" > .env
    echo ''
fi
clone_laravel
sleep 3s
docker-compose up --build -d

echo "Installation is not complete... please wait"
echo "Composer is installing dependencies..."
# checks if composer container is running
composer_done=$(docker ps | awk '/composer/ {print $2}')
while [ ! -z $composer_done ]
do
    composer_done=$(docker ps | awk '/composer/ {print $2}')
    sleep 5s
done
echo "Composer dependencies installed successfully!"
docker exec php chown -R www-data:www-data storage
echo "Generating laravel app key"
docker exec php php artisan key:generate
echo "Installation successfully done!"
